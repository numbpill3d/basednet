{"version":3,"file":"../app/api/users/route.js","mappings":"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","sources":["webpack://basednet/external commonjs \"@sentry/nextjs\"","webpack://basednet/external commonjs \"next/dist/client/components/action-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/client/components/request-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/client/components/static-generation-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/compiled/next-server/app-route.runtime.prod.js\"","webpack://basednet/external commonjs \"pg\"","webpack://basednet/external node-commonjs \"assert\"","webpack://basednet/external node-commonjs \"buffer\"","webpack://basednet/external node-commonjs \"crypto\"","webpack://basednet/external node-commonjs \"events\"","webpack://basednet/external node-commonjs \"http\"","webpack://basednet/external node-commonjs \"https\"","webpack://basednet/external node-commonjs \"querystring\"","webpack://basednet/external node-commonjs \"url\"","webpack://basednet/external node-commonjs \"util\"","webpack://basednet/external node-commonjs \"zlib\"","webpack://basednet/./src/lib/db.ts","webpack://basednet/src/app/api/auth/[...nextauth]/route.ts","webpack://basednet/sentry-wrapper-module","webpack://basednet/src/app/api/users/route.ts","webpack://basednet/?c65e","webpack://basednet/./sentry.server.config.ts","webpack://basednet/./src/db/config.ts","webpack://basednet/./src/db/models/profile.ts","webpack://basednet/./src/db/models/user.ts","webpack://basednet/./src/lib/auth.ts","webpack://basednet/<anon>"],"sourcesContent":["module.exports = require(\"@sentry/nextjs\");","module.exports = require(\"next/dist/client/components/action-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/request-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/static-generation-async-storage.external.js\");","module.exports = require(\"next/dist/compiled/next-server/app-route.runtime.prod.js\");","module.exports = require(\"pg\");","module.exports = require(\"assert\");","module.exports = require(\"buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"querystring\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","import { Pool, QueryResult, PoolClient } from 'pg';\n\n// Define types for our database entities\ninterface User {\n  id: number;\n  username: string;\n  email?: string;\n  auth_domain: string;\n  created_at: Date;\n  updated_at: Date;\n}\n\ninterface Profile {\n  id: number;\n  user_id: number;\n  display_name?: string;\n  bio?: string;\n  avatar_url?: string;\n  theme_preferences?: Record<string, unknown>;\n  custom_css?: string;\n  custom_html?: string;\n  social_links?: Record<string, string>;\n  created_at: Date;\n  updated_at: Date;\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not defined');\n}\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Test the connection on startup\npool.query('SELECT NOW()', (err: Error | null) => {\n  if (err) {\n    console.error('Database connection error:', err.message);\n  } else {\n    console.log('Database connected successfully');\n  }\n});\n\n// Helper functions for common database operations\nexport async function query<T = any>(\n  text: string,\n  params?: any[]\n): Promise<QueryResult<T>> {\n  const start = Date.now();\n  try {\n    const res = await pool.query<T>(text, params);\n    const duration = Date.now() - start;\n    console.log('Executed query', { text, duration, rows: res.rowCount });\n    return res;\n  } catch (err) {\n    const error = err as Error;\n    console.error('Query error:', error.message);\n    throw error;\n  }\n}\n\nexport async function getUser(username: string): Promise<User | null> {\n  const result = await query<User>(\n    'SELECT * FROM users WHERE username = $1',\n    [username]\n  );\n  return result.rows[0] || null;\n}\n\nexport async function createUser(\n  username: string,\n  authDomain: string\n): Promise<User> {\n  const result = await query<User>(\n    'INSERT INTO users (username, auth_domain) VALUES ($1, $2) RETURNING *',\n    [username, authDomain]\n  );\n  return result.rows[0];\n}\n\nexport async function getProfile(userId: number): Promise<Profile | null> {\n  const result = await query<Profile>(\n    'SELECT * FROM profiles WHERE user_id = $1',\n    [userId]\n  );\n  return result.rows[0] || null;\n}\n\nexport async function updateProfile(\n  userId: number,\n  profileData: Partial<Profile>\n): Promise<Profile> {\n  const result = await query<Profile>(\n    `UPDATE profiles \n     SET display_name = $2,\n         bio = $3,\n         avatar_url = $4,\n         theme_preferences = $5,\n         custom_css = $6,\n         custom_html = $7,\n         social_links = $8,\n         updated_at = CURRENT_TIMESTAMP\n     WHERE user_id = $1\n     RETURNING *`,\n    [\n      userId,\n      profileData.display_name,\n      profileData.bio,\n      profileData.avatar_url,\n      profileData.theme_preferences,\n      profileData.custom_css,\n      profileData.custom_html,\n      profileData.social_links,\n    ]\n  );\n  return result.rows[0];\n}\n\n// Transaction helper\nexport async function withTransaction<T>(\n  callback: (client: PoolClient) => Promise<T>\n): Promise<T> {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('COMMIT');\n    return result;\n  } catch (err) {\n    await client.query('ROLLBACK');\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n\n// Cleanup on application shutdown\nprocess.on('SIGTERM', async () => {\n  console.log('Closing database pool');\n  await pool.end();\n});\n\nexport default pool;","import { NextAuthOptions } from 'next-auth';\nimport NextAuth from 'next-auth/next';\nimport { withTransaction } from '@/lib/db';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    {\n      id: 'indieauth',\n      name: 'IndieAuth',\n      type: 'oauth',\n      authorization: {\n        url: 'https://indieauth.com/auth',\n        params: { scope: 'profile email' }\n      },\n      token: {\n        url: 'https://tokens.indieauth.com/token',\n      },\n      userinfo: {\n        url: 'https://indieauth.com/userinfo',\n        async request({ tokens, client }) {\n          // IndieAuth specific user info handling\n          return {\n            id: tokens.me,\n            name: tokens.name || tokens.me,\n            email: tokens.email,\n            image: tokens.photo,\n          };\n        },\n      },\n      profile(profile) {\n        return {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.image,\n        };\n      },\n      clientId: process.env.INDIE_AUTH_CLIENT_ID,\n      clientSecret: process.env.INDIE_AUTH_CLIENT_SECRET,\n    },\n  ],\n  callbacks: {\n    async signIn({ user, account, profile }) {\n      try {\n        await withTransaction(async (client) => {\n          // Check if user exists\n          const result = await client.query(\n            'SELECT * FROM users WHERE auth_domain = $1',\n            [profile.id]\n          );\n\n          if (result.rows.length === 0) {\n            // Create new user\n            await client.query(\n              'INSERT INTO users (username, auth_domain, email) VALUES ($1, $2, $3)',\n              [profile.name, profile.id, profile.email]\n            );\n\n            // Create empty profile\n            await client.query(\n              'INSERT INTO profiles (user_id) VALUES (currval(\\'users_id_seq\\'))'\n            );\n          }\n        });\n        return true;\n      } catch (error) {\n        console.error('Error during sign in:', error);\n        return false;\n      }\n    },\n    async session({ session, user }) {\n      try {\n        const result = await withTransaction(async (client) => {\n          const userResult = await client.query(\n            'SELECT * FROM users WHERE email = $1',\n            [session.user?.email]\n          );\n          \n          if (userResult.rows[0]) {\n            return {\n              ...session,\n              user: {\n                ...session.user,\n                id: userResult.rows[0].id,\n                username: userResult.rows[0].username,\n              },\n            };\n          }\n          return session;\n        });\n        return result;\n      } catch (error) {\n        console.error('Error getting session:', error);\n        return session;\n      }\n    },\n  },\n  pages: {\n    signIn: '/auth/signin',\n    error: '/auth/error',\n  },\n  debug: process.env.NODE_ENV === 'development',\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };","import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport * as Sentry from '@sentry/nextjs';\nimport { requestAsyncStorage } from 'next/dist/client/components/request-async-storage.external.js';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport {} from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\nfunction wrapHandler(handler, method) {\n  // Running the instrumentation code during the build phase will mark any function as \"dynamic\" because we're accessing\n  // the Request object. We do not want to turn handlers dynamic so we skip instrumentation in the build phase.\n  if (process.env.NEXT_PHASE === 'phase-production-build') {\n    return handler;\n  }\n\n  if (typeof handler !== 'function') {\n    return handler;\n  }\n\n  return new Proxy(handler, {\n    apply: (originalFunction, thisArg, args) => {\n      let sentryTraceHeader = undefined;\n      let baggageHeader = undefined;\n      let headers = undefined;\n\n      // We try-catch here just in case the API around `requestAsyncStorage` changes unexpectedly since it is not public API\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const requestAsyncStore = requestAsyncStorage.getStore() ;\n        sentryTraceHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _ => _.headers, 'access', _2 => _2.get, 'call', _3 => _3('sentry-trace')]), () => ( undefined));\n        baggageHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _4 => _4.headers, 'access', _5 => _5.get, 'call', _6 => _6('baggage')]), () => ( undefined));\n        headers = _optionalChain([requestAsyncStore, 'optionalAccess', _7 => _7.headers]);\n      } catch (e) {\n        /** empty */\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      return Sentry.wrapRouteHandlerWithSentry(originalFunction , {\n        method,\n        parameterizedRoute: '/api/auth/[...nextauth]',\n        sentryTraceHeader,\n        baggageHeader,\n        headers,\n      }).apply(thisArg, args);\n    },\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst GET = wrapHandler(serverComponentModule.GET , 'GET');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst POST = wrapHandler(serverComponentModule.POST , 'POST');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PUT = wrapHandler(serverComponentModule.PUT , 'PUT');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PATCH = wrapHandler(serverComponentModule.PATCH , 'PATCH');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst DELETE = wrapHandler(serverComponentModule.DELETE , 'DELETE');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst HEAD = wrapHandler(serverComponentModule.HEAD , 'HEAD');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst OPTIONS = wrapHandler(serverComponentModule.OPTIONS , 'OPTIONS');\n\nexport { DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT };\n","import { NextRequest, NextResponse } from 'next/server';\r\nimport { getCurrentUser, requireAuth } from '../../../lib/auth';\r\nimport { UserModel } from '../../../db/models/user';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Check if the request is for the current user or a list of users\r\n    const url = new URL(req.url);\r\n    const me = url.searchParams.get('me') === 'true';\r\n\r\n    if (me) {\r\n      // Get current user with session\r\n      const user = await getCurrentUser();\r\n      if (!user) {\r\n        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n      }\r\n      return NextResponse.json({ user });\r\n    } else {\r\n      // For listing users, require authentication\r\n      await requireAuth();\r\n      \r\n      // Pagination parameters\r\n      const limit = parseInt(url.searchParams.get('limit') || '10');\r\n      const offset = parseInt(url.searchParams.get('offset') || '0');\r\n      \r\n      const users = await UserModel.list(limit, offset);\r\n      return NextResponse.json({ users });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    if ((error as Error).message === 'Authentication required') {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch users' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(req: NextRequest) {\r\n  try {\r\n    const user = await getCurrentUser();\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const data = await req.json();\r\n    // Only allow updating certain fields\r\n    const allowedUpdates = ['username', 'email'];\r\n    const updates: Record<string, any> = {};\r\n    \r\n    for (const key of allowedUpdates) {\r\n      if (data[key] !== undefined) {\r\n        updates[key] = data[key];\r\n      }\r\n    }\r\n\r\n    if (Object.keys(updates).length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No valid update fields provided' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const updatedUser = await UserModel.update(user.id, updates);\r\n    if (!updatedUser) {\r\n      return NextResponse.json(\r\n        { error: 'Failed to update user' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ user: updatedUser });\r\n  } catch (error) {\r\n    console.error('Error updating user:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to update user' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"C:\\\\Users\\\\adoni\\\\Desktop\\\\projects\\\\basednet\\\\src\\\\app\\\\api\\\\users\\\\route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/users/route\",\n        pathname: \"/api/users\",\n        filename: \"route\",\n        bundlePath: \"app/api/users/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\adoni\\\\Desktop\\\\projects\\\\basednet\\\\src\\\\app\\\\api\\\\users\\\\route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/users/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _sentryCollisionFreeGlobalObject = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : {};\n_sentryCollisionFreeGlobalObject[\"__sentryRewritesTunnelPath__\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"SENTRY_RELEASE\"] = {\"id\":\"wdkRqJwFkIUdQPuSy7-Vq\"};\n_sentryCollisionFreeGlobalObject[\"__sentryBasePath\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__rewriteFramesDistDir__\"] = \".next\";\n\nimport * as Sentry from '@sentry/nextjs'\r\n\r\nSentry.init({\r\n  dsn: process.env.SENTRY_DSN,\r\n  \r\n  // Performance Monitoring\r\n  tracesSampleRate: 0.1, // Capture 10% of transactions for performance monitoring\r\n  \r\n  // Enable automatic instrumentation for Next.js\r\n  integrations: [\r\n    new Sentry.BrowserTracing({\r\n      // Set sampling rate for performance monitoring\r\n      tracePropagationTargets: ['localhost', /^https:\\/\\/[^/]*\\.basednet\\.com/],\r\n    }),\r\n  ],\r\n\r\n  // Environment-specific configuration\r\n  environment: process.env.NODE_ENV,\r\n  \r\n  // Error filtering\r\n  beforeSend(event) {\r\n    // Don't send errors in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return null\r\n    }\r\n    \r\n    // Filter out specific errors\r\n    if (event.exception) {\r\n      const exceptionValue = event.exception.values?.[0]?.value\r\n      if (exceptionValue?.includes('ResizeObserver loop')) {\r\n        return null\r\n      }\r\n    }\r\n    \r\n    return event\r\n  },\r\n\r\n  // Additional configuration\r\n  debug: process.env.NODE_ENV === 'development',\r\n  maxBreadcrumbs: 50,\r\n  attachStacktrace: true,\r\n})\r\n","import { Pool } from 'pg';\n\nconst pool = new Pool({\n  user: process.env.POSTGRES_USER,\n  password: process.env.POSTGRES_PASSWORD,\n  host: process.env.POSTGRES_HOST,\n  port: parseInt(process.env.POSTGRES_PORT || '5432'),\n  database: process.env.POSTGRES_DB,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n});\n\nexport default pool;\n","import { Profile } from './types';\nimport pool from '../config';\nimport { QueryResult } from 'pg';\n\nexport class ProfileModel {\n  static async create(userId: number, data: Partial<Profile>): Promise<Profile> {\n    const fields = ['user_id', ...Object.keys(data)];\n    const values = [userId, ...Object.values(data)];\n    const placeholders = fields.map((_, i) => `$${i + 1}`).join(', ');\n    \n    const query = `\n      INSERT INTO profiles (${fields.join(', ')})\n      VALUES (${placeholders})\n      RETURNING *\n    `;\n    \n    const result: QueryResult<Profile> = await pool.query(query, values);\n    return result.rows[0];\n  }\n\n  static async findByUserId(userId: number): Promise<Profile | null> {\n    const query = 'SELECT * FROM profiles WHERE user_id = $1';\n    const result: QueryResult<Profile> = await pool.query(query, [userId]);\n    return result.rows[0] || null;\n  }\n\n  static async update(userId: number, updates: Partial<Profile>): Promise<Profile | null> {\n    const allowedUpdates = [\n      'display_name',\n      'bio',\n      'avatar_url',\n      'theme_preferences',\n      'custom_css',\n      'custom_html',\n      'social_links'\n    ];\n    \n    const updateFields = Object.keys(updates).filter(key => allowedUpdates.includes(key));\n    if (updateFields.length === 0) return null;\n\n    const setClause = updateFields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    const values = updateFields.map(field => {\n      const value = updates[field as keyof Profile];\n      return ['theme_preferences', 'social_links'].includes(field) ? JSON.stringify(value) : value;\n    });\n\n    const query = `\n      UPDATE profiles \n      SET ${setClause}, updated_at = CURRENT_TIMESTAMP \n      WHERE user_id = $1 \n      RETURNING *\n    `;\n\n    const result: QueryResult<Profile> = await pool.query(query, [userId, ...values]);\n    return result.rows[0] || null;\n  }\n\n  static async delete(userId: number): Promise<boolean> {\n    const query = 'DELETE FROM profiles WHERE user_id = $1 RETURNING id';\n    const result = await pool.query(query, [userId]);\n    return result.rowCount > 0;\n  }\n\n  static async getTheme(userId: number): Promise<Record<string, any> | null> {\n    const query = 'SELECT theme_preferences FROM profiles WHERE user_id = $1';\n    const result = await pool.query(query, [userId]);\n    return result.rows[0]?.theme_preferences || null;\n  }\n\n  static async updateTheme(userId: number, theme: Record<string, any>): Promise<boolean> {\n    const query = `\n      UPDATE profiles \n      SET theme_preferences = $2, updated_at = CURRENT_TIMESTAMP \n      WHERE user_id = $1\n    `;\n    const result = await pool.query(query, [userId, JSON.stringify(theme)]);\n    return result.rowCount > 0;\n  }\n}\n","import { User } from './types';\nimport pool from '../config';\nimport { QueryResult } from 'pg';\n\nexport class UserModel {\n  static async create(username: string, email?: string, authDomain?: string): Promise<User> {\n    const query = `\n      INSERT INTO users (username, email, auth_domain)\n      VALUES ($1, $2, $3)\n      RETURNING *\n    `;\n    \n    const result: QueryResult<User> = await pool.query(query, [username, email, authDomain]);\n    return result.rows[0];\n  }\n\n  static async findById(id: number): Promise<User | null> {\n    const query = 'SELECT * FROM users WHERE id = $1';\n    const result: QueryResult<User> = await pool.query(query, [id]);\n    return result.rows[0] || null;\n  }\n\n  static async findByUsername(username: string): Promise<User | null> {\n    const query = 'SELECT * FROM users WHERE username = $1';\n    const result: QueryResult<User> = await pool.query(query, [username]);\n    return result.rows[0] || null;\n  }\n\n  static async update(id: number, updates: Partial<User>): Promise<User | null> {\n    const allowedUpdates = ['username', 'email', 'auth_domain'];\n    const updateFields = Object.keys(updates).filter(key => allowedUpdates.includes(key));\n    \n    if (updateFields.length === 0) return null;\n\n    const setClause = updateFields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    const values = updateFields.map(field => updates[field as keyof User]);\n\n    const query = `\n      UPDATE users \n      SET ${setClause}, updated_at = CURRENT_TIMESTAMP \n      WHERE id = $1 \n      RETURNING *\n    `;\n\n    const result: QueryResult<User> = await pool.query(query, [id, ...values]);\n    return result.rows[0] || null;\n  }\n\n  static async delete(id: number): Promise<boolean> {\n    const query = 'DELETE FROM users WHERE id = $1 RETURNING id';\n    const result = await pool.query(query, [id]);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  static async list(limit: number = 10, offset: number = 0): Promise<User[]> {\n    const query = 'SELECT * FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2';\n    const result: QueryResult<User> = await pool.query(query, [limit, offset]);\n    return result.rows;\n  }\n}\n","import { getServerSession } from 'next-auth/next';\nimport { Session } from 'next-auth';\nimport { authOptions } from '../app/api/auth/[...nextauth]/route';\nimport { UserModel } from '../db/models/user';\nimport { ProfileModel } from '../db/models/profile';\n\ninterface ExtendedSession extends Session {\n  user?: {\n    id?: number;\n    name?: string | null;\n    email?: string | null;\n    image?: string | null;\n  };\n}\n\nexport async function getCurrentUser() {\n  const session = await getServerSession(authOptions) as ExtendedSession;\n  if (!session?.user?.id) return null;\n  \n  const user = await UserModel.findById(session.user.id);\n  return user;\n}\n\nexport async function getCurrentUserWithProfile() {\n  const session = await getServerSession(authOptions) as ExtendedSession;\n  if (!session?.user?.id) return null;\n  \n  const user = await UserModel.findById(session.user.id);\n  if (!user) return null;\n  \n  const profile = await ProfileModel.findByUserId(user.id);\n  return { user, profile };\n}\n\nexport function isAuthenticated(session: any): session is ExtendedSession {\n  return Boolean(session?.user?.id);\n}\n\nexport async function hasPermission(userId: number, resourceUserId: number) {\n  return userId === resourceUserId;\n}\n\nexport async function requireAuth() {\n  const session = await getServerSession(authOptions) as ExtendedSession;\n  if (!isAuthenticated(session)) {\n    throw new Error('Authentication required');\n  }\n  return session;\n}\n"],"names":["module","exports","require","process","env","DATABASE_URL","pool","Pool","connectionString","max","idleTimeoutMillis","connectionTimeoutMillis","withTransaction","callback","client","connect","query","result","err","release","console","error","message","log","on","end","authOptions","providers","id","name","type","authorization","url","params","scope","token","userinfo","request","tokens","me","email","image","photo","profile","clientId","INDIE_AUTH_CLIENT_ID","clientSecret","INDIE_AUTH_CLIENT_SECRET","callbacks","signIn","user","account","rows","length","session","userResult","username","pages","debug","handler","NextAuth","wrapHandler","method","NEXT_PHASE","Proxy","apply","originalFunction","thisArg","args","sentryTraceHeader","baggageHeader","headers","requestAsyncStore","request_async_storage_external_js_","requestAsyncStorage","getStore","_nullishCoalesce","h","_optionalChain","x","_","_2","get","_3","undefined","_4","_5","_6","_7","e","nextjs_","wrapRouteHandlerWithSentry","parameterizedRoute","GET","serverComponentModule.GET","POST","serverComponentModule.POST","PUT","serverComponentModule.PUT","PATCH","serverComponentModule.PATCH","DELETE","serverComponentModule.DELETE","HEAD","serverComponentModule.HEAD","OPTIONS","serverComponentModule.OPTIONS","req","getCurrentUser","NextResponse","json","status","data","updates","key","Object","keys","updatedUser","UserModel","update","URL","searchParams","requireAuth","limit","parseInt","offset","users","list","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","_sentryCollisionFreeGlobalObject","global","self","Sentry","dsn","SENTRY_DSN","tracesSampleRate","integrations","tracePropagationTargets","environment","beforeSend","event","exception","exceptionValue","values","value","includes","maxBreadcrumbs","attachStacktrace","__WEBPACK_DEFAULT_EXPORT__","POSTGRES_USER","password","POSTGRES_PASSWORD","host","POSTGRES_HOST","port","POSTGRES_PORT","database","POSTGRES_DB","ssl","rejectUnauthorized","ProfileModel","create","userId","fields","placeholders","map","i","join","findByUserId","allowedUpdates","updateFields","filter","setClause","field","index","JSON","stringify","delete","rowCount","getTheme","theme_preferences","updateTheme","theme","authDomain","findById","findByUsername","getServerSession","hasPermission","resourceUserId"],"sourceRoot":""}