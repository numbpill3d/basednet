{"version":3,"file":"../app/api/ipfs/route.js","mappings":"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","sources":["webpack://basednet/external commonjs \"@sentry/nextjs\"","webpack://basednet/external commonjs \"next/dist/client/components/action-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/client/components/request-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/client/components/static-generation-async-storage.external.js\"","webpack://basednet/external commonjs \"next/dist/compiled/next-server/app-route.runtime.prod.js\"","webpack://basednet/external commonjs \"pg\"","webpack://basednet/external node-commonjs \"assert\"","webpack://basednet/external node-commonjs \"buffer\"","webpack://basednet/external node-commonjs \"crypto\"","webpack://basednet/external node-commonjs \"events\"","webpack://basednet/external node-commonjs \"http\"","webpack://basednet/external node-commonjs \"https\"","webpack://basednet/external node-commonjs \"querystring\"","webpack://basednet/external node-commonjs \"url\"","webpack://basednet/external node-commonjs \"util\"","webpack://basednet/external node-commonjs \"zlib\"","webpack://basednet/src/app/api/ipfs/route.ts","webpack://basednet/sentry-wrapper-module","webpack://basednet/?03b5","webpack://basednet/<anon>"],"sourcesContent":["module.exports = require(\"@sentry/nextjs\");","module.exports = require(\"next/dist/client/components/action-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/request-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/static-generation-async-storage.external.js\");","module.exports = require(\"next/dist/compiled/next-server/app-route.runtime.prod.js\");","module.exports = require(\"pg\");","module.exports = require(\"assert\");","module.exports = require(\"buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"querystring\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","import { NextRequest, NextResponse } from 'next/server';\r\nimport { getCurrentUser } from '../../../lib/auth';\r\nimport { IpfsContentModel } from '../../../db/models/ipfs-content';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const user = await getCurrentUser();\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const url = new URL(req.url);\r\n    const limit = parseInt(url.searchParams.get('limit') || '10');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n\r\n    const content = await IpfsContentModel.findByUser(user.id, limit, offset);\r\n    const stats = await IpfsContentModel.getContentStats(user.id);\r\n\r\n    return NextResponse.json({ content, stats });\r\n  } catch (error) {\r\n    console.error('Error fetching IPFS content:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch IPFS content' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const user = await getCurrentUser();\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const data = await req.json();\r\n    const { cid, contentType, filename, size } = data;\r\n\r\n    if (!cid) {\r\n      return NextResponse.json(\r\n        { error: 'CID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const content = await IpfsContentModel.create(\r\n      user.id,\r\n      cid,\r\n      contentType,\r\n      filename,\r\n      size\r\n    );\r\n\r\n    return NextResponse.json({ content }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating IPFS content:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to create IPFS content' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport * as Sentry from '@sentry/nextjs';\nimport { requestAsyncStorage } from 'next/dist/client/components/request-async-storage.external.js';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport {} from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\nfunction wrapHandler(handler, method) {\n  // Running the instrumentation code during the build phase will mark any function as \"dynamic\" because we're accessing\n  // the Request object. We do not want to turn handlers dynamic so we skip instrumentation in the build phase.\n  if (process.env.NEXT_PHASE === 'phase-production-build') {\n    return handler;\n  }\n\n  if (typeof handler !== 'function') {\n    return handler;\n  }\n\n  return new Proxy(handler, {\n    apply: (originalFunction, thisArg, args) => {\n      let sentryTraceHeader = undefined;\n      let baggageHeader = undefined;\n      let headers = undefined;\n\n      // We try-catch here just in case the API around `requestAsyncStorage` changes unexpectedly since it is not public API\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const requestAsyncStore = requestAsyncStorage.getStore() ;\n        sentryTraceHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _ => _.headers, 'access', _2 => _2.get, 'call', _3 => _3('sentry-trace')]), () => ( undefined));\n        baggageHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _4 => _4.headers, 'access', _5 => _5.get, 'call', _6 => _6('baggage')]), () => ( undefined));\n        headers = _optionalChain([requestAsyncStore, 'optionalAccess', _7 => _7.headers]);\n      } catch (e) {\n        /** empty */\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      return Sentry.wrapRouteHandlerWithSentry(originalFunction , {\n        method,\n        parameterizedRoute: '/api/ipfs',\n        sentryTraceHeader,\n        baggageHeader,\n        headers,\n      }).apply(thisArg, args);\n    },\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst GET = wrapHandler(serverComponentModule.GET , 'GET');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst POST = wrapHandler(serverComponentModule.POST , 'POST');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PUT = wrapHandler(serverComponentModule.PUT , 'PUT');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PATCH = wrapHandler(serverComponentModule.PATCH , 'PATCH');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst DELETE = wrapHandler(serverComponentModule.DELETE , 'DELETE');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst HEAD = wrapHandler(serverComponentModule.HEAD , 'HEAD');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst OPTIONS = wrapHandler(serverComponentModule.OPTIONS , 'OPTIONS');\n\nexport { DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT };\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"C:\\\\Users\\\\adoni\\\\Desktop\\\\projects\\\\basednet\\\\src\\\\app\\\\api\\\\ipfs\\\\route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/ipfs/route\",\n        pathname: \"/api/ipfs\",\n        filename: \"route\",\n        bundlePath: \"app/api/ipfs/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\adoni\\\\Desktop\\\\projects\\\\basednet\\\\src\\\\app\\\\api\\\\ipfs\\\\route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/ipfs/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map"],"names":["module","exports","require","POST","req","user","getCurrentUser","NextResponse","json","error","status","cid","contentType","filename","size","content","IpfsContentModel","create","id","console","wrapHandler","handler","method","process","env","NEXT_PHASE","Proxy","apply","originalFunction","thisArg","args","sentryTraceHeader","baggageHeader","headers","requestAsyncStore","request_async_storage_external_js_","requestAsyncStorage","getStore","_nullishCoalesce","h","_optionalChain","x","_","_2","get","_3","undefined","_4","_5","_6","_7","e","nextjs_","wrapRouteHandlerWithSentry","parameterizedRoute","GET","url","URL","limit","parseInt","searchParams","offset","findByUser","stats","getContentStats","serverComponentModule.POST","PUT","serverComponentModule.PUT","PATCH","serverComponentModule.PATCH","DELETE","serverComponentModule.DELETE","HEAD","serverComponentModule.HEAD","OPTIONS","serverComponentModule.OPTIONS","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","APP_ROUTE","page","pathname","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch"],"sourceRoot":""}